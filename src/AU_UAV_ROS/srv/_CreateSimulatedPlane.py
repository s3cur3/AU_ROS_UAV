"""autogenerated by genmsg_py from CreateSimulatedPlaneRequest.msg. Do not edit."""
import roslib.message
import struct


class CreateSimulatedPlaneRequest(roslib.message.Message):
  _md5sum = "f5e11354850d0839e676d35e9e3ae44c"
  _type = "AU_UAV_ROS/CreateSimulatedPlaneRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 startingLatitude
float64 startingLongitude
float64 startingAltitude
int64 startingBearing
int16 requestedID

"""
  __slots__ = ['startingLatitude','startingLongitude','startingAltitude','startingBearing','requestedID']
  _slot_types = ['float64','float64','float64','int64','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       startingLatitude,startingLongitude,startingAltitude,startingBearing,requestedID
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(CreateSimulatedPlaneRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.startingLatitude is None:
        self.startingLatitude = 0.
      if self.startingLongitude is None:
        self.startingLongitude = 0.
      if self.startingAltitude is None:
        self.startingAltitude = 0.
      if self.startingBearing is None:
        self.startingBearing = 0
      if self.requestedID is None:
        self.requestedID = 0
    else:
      self.startingLatitude = 0.
      self.startingLongitude = 0.
      self.startingAltitude = 0.
      self.startingBearing = 0
      self.requestedID = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3dqh.pack(_x.startingLatitude, _x.startingLongitude, _x.startingAltitude, _x.startingBearing, _x.requestedID))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 34
      (_x.startingLatitude, _x.startingLongitude, _x.startingAltitude, _x.startingBearing, _x.requestedID,) = _struct_3dqh.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3dqh.pack(_x.startingLatitude, _x.startingLongitude, _x.startingAltitude, _x.startingBearing, _x.requestedID))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 34
      (_x.startingLatitude, _x.startingLongitude, _x.startingAltitude, _x.startingBearing, _x.requestedID,) = _struct_3dqh.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3dqh = struct.Struct("<3dqh")
"""autogenerated by genmsg_py from CreateSimulatedPlaneResponse.msg. Do not edit."""
import roslib.message
import struct


class CreateSimulatedPlaneResponse(roslib.message.Message):
  _md5sum = "416bfeb9353c15e349b0805ccac980c0"
  _type = "AU_UAV_ROS/CreateSimulatedPlaneResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int16 planeID


"""
  __slots__ = ['planeID']
  _slot_types = ['int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       planeID
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(CreateSimulatedPlaneResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.planeID is None:
        self.planeID = 0
    else:
      self.planeID = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_h.pack(self.planeID))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 2
      (self.planeID,) = _struct_h.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_h.pack(self.planeID))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 2
      (self.planeID,) = _struct_h.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_h = struct.Struct("<h")
class CreateSimulatedPlane(roslib.message.ServiceDefinition):
  _type          = 'AU_UAV_ROS/CreateSimulatedPlane'
  _md5sum = 'f4229a3b0a6dc585aeb2c4ece67a1b3c'
  _request_class  = CreateSimulatedPlaneRequest
  _response_class = CreateSimulatedPlaneResponse
